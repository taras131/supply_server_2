from fastapi import Depends
from core.models import Subscriber, db_helper
from telegram.error import Forbidden
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio
from telegram.ext import Application, CommandHandler, CallbackContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.future import select

TOKEN = "7588156307:AAH3JN6qVxxjyJ3y1lMeYmekGvG5P-eEFnQ"

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def subscribe(update: Update, context: CallbackContext):
    # –ü–æ–ª—É—á–∞–µ–º scoped session –∏–∑ db_helper
    session = db_helper.get_scoped_session()

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        user = update.effective_user
        subscriber = Subscriber(chat_id=user.id, username=user.username or "Unknown")

        session.add(subscriber)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏—é
        await session.commit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, {user.first_name or '–î—Ä—É–≥'}!"
        )
    except Exception as e:
        # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await session.rollback()
        raise e
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ scoped session –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await session.remove()


async def post_init(application: Application):
    await application.bot.set_my_commands(
        [
            ("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        ]
    )


async def error_handler(update: Update, context: CallbackContext):
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", context.error)


async def start_bot():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).post_init(post_init).build()
        application.add_handler(CommandHandler("subscribe", subscribe))
        application.add_error_handler(error_handler)
        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        while True:
            await asyncio.sleep(3600)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()


async def send_notification(chat_id: int, problem_data: dict):
    try:
        message = f"üö® –ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º!"
        # await bot.send_message(
        #    chat_id=chat_id, text=message, parse_mode=ParseMode.MARKDOWN_V2
    #  )
    except Forbidden:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        pass
